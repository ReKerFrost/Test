name: Workflow TSW

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
PROJECT_ID: ${{ secrets.GKE_PROJECT }}
GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
GKE_CLUSTER: cluster-1    # TODO: update to cluster name
GKE_ZONE: us-central1-c   # TODO: update to cluster zone
DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
REPOSITORY: samples # TODO: update to Artifact Registry docker repository
IMAGE: static-site

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Chequear el código
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.21'

    - name: Build del Proyecto
      run: go build -o mi-aplicacion .

  push_to_registry:
    runs-on: ubuntu-latest

    needs: build

    steps:
    - name: Chequear el código
      uses: actions/checkout@v3

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)

  deploy:
    runs-on: ubuntu-latest

    needs: push_to_registry
	environmente: production
	
	steps:
    - name: Checkout
      uses: actions/checkout@v3

    - id: 'auth-service-account'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GKE_SA_KEY }}'

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@1bee7de035d65ec5da40a31f8589e240eba8fde5
      with:
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@db150f2cc60d1716e61922b832eae71d2a45938f
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        sed -i "s~{DEPLOYMENT_NAME}~${{ env.DEPLOYMENT_NAME }}~" deploy/k8s/deployment.yaml
        sed -i "s~{DEPLOYMENT_NAME}~${{ env.DEPLOYMENT_NAME }}~" deploy/k8s/service.yaml
        sed -i "s~{DEPLOYMENT_NAME}~${{ env.DEPLOYMENT_NAME }}~" deploy/k8s/configmap.yaml
        sed -i "s~{DEPLOYMENT_NAME}~${{ env.DEPLOYMENT_NAME }}~" deploy/k8s/ingress.yaml
        sed -i "s~{NAMESPACE}~${{ env.NAMESPACE }}~" deploy/k8s/deployment.yaml
        sed -i "s~{NAMESPACE}~${{ env.NAMESPACE }}~" deploy/k8s/service.yaml
        sed -i "s~{NAMESPACE}~${{ env.NAMESPACE }}~" deploy/k8s/configmap.yaml
        sed -i "s~{NAMESPACE}~${{ env.NAMESPACE }}~" deploy/k8s/ingress.yaml
        sed -i "s~{IMAGE_NAME}~${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/${{ env.DEPLOYMENT_NAME }}~" deploy/k8s/deployment.yaml
        sed -i "s~{IMAGE_TAG}~${{ env.IMAGE_TAG }}~" deploy/k8s/deployment.yaml
        sed -i "s~{API_HOST}~${{ env.API_HOST }}~" deploy/k8s/ingress.yaml
        kubectl apply -f ./deploy/k8s/
        kubectl rollout status deployment/$DEPLOYMENT_NAME -n ${{ env.NAMESPACE }}
        kubectl get services -o wide
